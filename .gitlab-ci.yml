image: python:latest

stages:
 - Automated Code Review
 - Sensitive Information Scan
 - Source Composition Analysis
 - Static Application Security Testing
 - Dynamic Application Security Testing 
#  - test

services:
  - docker:dind
  
bandit:
  stage: Static Application Security Testing
  script:
    - pip install -r requirements.txt
    - pip install bandit
    - 'bandit -r app.py  > bandit-output.txt '
  artifacts:
    paths: [bandit-output.txt]
  

devskim:
    image: docker:latest
    stage: Automated Code Review
    
    script:
      - docker run --volume `pwd`:/code coderpatros/devskim:latest analyze /app.py
      - python3 -m pytest --junitxml=tests.xml app.py
    artifacts:
      paths: [tests.xml]

trufflehog:
   stage: Sensitive Information Scan

   script:
    - pip install truffleHog
    - truffleHog --regex --entropy=False .

dependencycheck:
   image: owasp/dependency-check
   stage: Source Composition Analysis

   script:
    - /usr/share/dependency-check/bin/dependency-check.sh --project . --out . --scan . --enableExperimental --failOnCVSS 7

owasp:
   image: docker:latest
   stage: Dynamic Application Security Testing

   script:
     - echo 'hello!'
     - docker run -t owasp/zap2docker-stable zap-baseline.py -t http://56d6c3d7cfd6.ngrok.io
   allow_failure: true
