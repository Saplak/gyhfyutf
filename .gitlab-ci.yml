image: python:latest

stages:
 - Automated Code Review
 - Sensitive Information Scan
 - Source Composition Analysis
 - Static Application Security Testing
 - Dynamic Application Security Testing 
 - Deploy


services:
  - docker:dind
  
bandit:
  stage: Static Application Security Testing
  script:
    - pip install -r requirements.txt
    - pip install bandit
    - 'bandit -r app.py'
  artifacts:
    paths: [bandit-output.txt]
  allow_failure: true

snyk:
  stage: Static Application Security Testing
  script:
    - pip install -r requirements.txt
    - wget https://github.com/snyk/snyk/releases/download/v1.204.0/snyk-linux
    - mv snyk-linux snyk && chmod +x snyk
    - ./snyk test --json > snyk-results.json
  artifacts:
    when: always
    paths:
    - snyk-results.json
  allow_failure: true


devskim:
    image: docker:latest
    stage: Automated Code Review
    
    script:
      - docker run michelleamesquita/devskim analyze app.py
    allow_failure: true

trufflehog:
   image: docker:latest
   stage: Sensitive Information Scan

   script:
     - docker run --rm -v "$(pwd):/proj" dxa4481/trufflehog .
   allow_failure: true


dependencycheck:
   stage: Source Composition Analysis
   script:
     - pip install safety
     - safety check -r requirements.txt --json > safety-results.json 
   artifacts:
     paths: [safety-results.json]
     when: always 


owasp:
   image: docker:latest
   stage: Dynamic Application Security Testing

   script:
     - echo 'hello!'
     - docker run -t owasp/zap2docker-stable zap-baseline.py -t ${URL2}
   allow_failure: true

# before_script:
#   - echo "Before script..."
#   - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
#   - apt-get -y install zip unzip
#   - eval $(ssh-agent -s)
#   - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#   - mkdir -p ~/.ssh
#   - chmod 700 ~/.ssh

deploy:
  #image: docker:latest
  image: ubuntu:latest
  stage: Deploy

  script:
     - 'echo "Building docker!"'
     - apt-get update
     - apt-get install sshpass -y
     - sshpass -p "${PASSWD}" ssh -T ${DEPLOY_HOST}
    #  - "docker build -t ${CI_REGISTRY_USER}/simpleapp:latest ."
    #  - "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}"
    #  - "docker push ${CI_REGISTRY_USER}/simpleapp:latest"
     - 'echo "Deploy docker!"'
     - "docker pull ${CI_REGISTRY_USER}/simpleapp:latest"
     - "docker stop $(docker ps -a -q  --filter ancestor=${CI_REGISTRY_USER}/simpleapp:latest)"
     - "docker run APP_PORT=$APP_PORT -p $APP_PORT:$APP_PORT ${CI_REGISTRY_USER}/simpleapp:latest"

