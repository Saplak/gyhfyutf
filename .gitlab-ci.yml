image: python:latest

stages:
 - Automated Code Review
 - Sensitive Information Scan
 - Source Composition Analysis
 - Static Application Security Testing
 - Dynamic Application Security Testing 
#  - test

services:
  - docker:dind
  
bandit:
  stage: Static Application Security Testing
  script:
    - pip install -r requirements.txt
    - pip install bandit
    - 'bandit -r app.py  > bandit-output.txt '
  artifacts:
    paths: [bandit-output.txt]
  allow_failure: true

snyk:
  stage: Static Application Security Testing
  script:
    - pip install -r requirements.txt
    - wget https://github.com/snyk/snyk/releases/download/v1.204.0/snyk-linux
    - mv snyk-linux snyk && chmod +x snyk
    - ./snyk test --json > snyk-results.json
  artifacts:
    when: always
    paths:
    - snyk-results.json
  allow_failure: true


devskim:
    image: docker:latest
    stage: Automated Code Review
    
    script:
      - docker run michelleamesquita/devskim analyze app.py
    allow_failure: true

trufflehog:
   stage: Sensitive Information Scan

   script:
    - pip install truffleHog
    - truffleHog --regex --entropy=False .
   allow_failure: true

dependencycheck:
   image: owasp/dependency-check
   stage: Source Composition Analysis

   script:
    - docker run -v $(pwd):/src -v $(pwd):/usr/share/dependency-check/data -v $(pwd)/odc-reports:/report owasp/dependency-check --scan . --format "JSON" --out . --failOnCVSS 7
   allow_failure: true
   artifacts:
    paths: [dependency-check-report.json]

owasp:
   image: docker:latest
   stage: Dynamic Application Security Testing

   script:
     - echo 'hello!'
     - docker run -t owasp/zap2docker-stable zap-baseline.py -t ${URL}
   allow_failure: true
