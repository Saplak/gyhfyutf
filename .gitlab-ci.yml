image: python:latest

stages:
 - Build
#  - Static Application Security Testing
#  - test
 - Dynamic Application Security Testing 
 - Deploy


services:
  - docker:dind 

build:
   image: docker:latest
   stage: Build

   variables:
    IMAGE: ${CI_REGISTRY_USER}/simpleapp:latest

   script:
      - "docker build -t ${CI_REGISTRY_USER}/simpleapp:latest ."
      - "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}"
      - "docker push ${CI_REGISTRY_USER}/simpleapp:latest"
include:
  - template: Security/Container-Scanning.gitlab-ci.yml



owasp:
   image: docker:latest
   stage: Dynamic Application Security Testing

   script:
     - echo 'hello!'
     - docker run -t owasp/zap2docker-stable zap-baseline.py -t ${URL2}
   allow_failure: true



deploy:
  image: ubuntu:latest
  stage: Deploy

  script:
     - 'echo "Building docker!"'
     - apt-get update -qq
     # Setup SSH deploy keys
     - 'which ssh-agent || ( apt-get install -qq openssh-client )'
     - eval $(ssh-agent -s)
     - ssh-add <(echo "$SSH_PRIVATE_KEY")
     - mkdir -p ~/.ssh
     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  
     - echo "Deploy project on server"
     - ssh $DEPLOY_HOST "docker pull ${CI_REGISTRY_USER}/simpleapp:latest"
     - ssh $DEPLOY_HOST "docker stop app3"
     - ssh $DEPLOY_HOST "docker run --rm -d --name app3 -p $APP_PORT:$APP_PORT ${CI_REGISTRY_USER}/simpleapp:latest"

# include:
#   - template: Security/Container-Scanning.gitlab-ci.yml
  #- template: Jobs/Build.gitlab-ci.yml  
  #- template: Jobs/Code-Quality.gitlab-ci.yml  
  #- template: Jobs/Deploy.gitlab-ci.yml  
  #- template: Jobs/DAST-Default-Branch-Deploy.gitlab-ci.yml  
  #- template: Jobs/Browser-Performance-Testing.gitlab-ci.yml  
  #- template: Security/DAST.gitlab-ci.yml  
  #- template: Security/Container-Scanning.gitlab-ci.yml  
  #- template: Security/Dependency-Scanning.gitlab-ci.yml  
  #- template: Security/License-Scanning.gitlab-ci.yml  
  #- template: Security/SAST.gitlab-ci.yml  
  #- template: Security/Secret-Detection.gitlab-ci.yml  

  
# bandit:
#   stage: Static Application Security Testing
#   script:
#     - pip install -r requirements.txt
#     - pip install bandit
#     - 'bandit -r app.py'
#   artifacts:
#     paths: [bandit-output.txt]
#   allow_failure: true

# snyk:
#   stage: Static Application Security Testing
#   script:
#     - pip install -r requirements.txt
#     - wget https://github.com/snyk/snyk/releases/download/v1.204.0/snyk-linux
#     - mv snyk-linux snyk && chmod +x snyk
#     - ./snyk test --json > snyk-results.json
#   artifacts:
#     when: always
#     paths:
#     - snyk-results.json
#   allow_failure: true


# dependencycheck:
#    stage: Source Composition Analysis
#    script:
#      - pip install safety
#      - safety check -r requirements.txt --json > safety-results.json 
#    artifacts:
#      paths: [safety-results.json]
#      when: always 



   
   
   
